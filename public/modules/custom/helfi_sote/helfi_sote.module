<?php

/**
 * @file
 * Contains helfi_sote.
 */

declare(strict_types=1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_sote_preprocess_tpr_unit(array &$variables) : void {
  // Get provided languages for the template.
  $provided_languages = $variables['entity']->get('provided_languages')->getValue();

  foreach ($provided_languages as $provided_language) {
    $variables['provided_languages'][] = $provided_language['value'];
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_sote_helfi_paragraph_types() : array {

  // Enable Unit accessibility information and Unit contact card paragraphs.
  $entities = [
    'tpr_unit' => [
      'tpr_unit' => [
        'field_content' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
        'field_lower_content' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
      ],
    ],
    'tpr_service' => [
      'tpr_service' => [
        'field_content' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
        'field_lower_content' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
      ],
    ],
    'node' => [
      'page' => [
        'field_content' => [
          'calculator',
          'unit_accessibility_information',
          'unit_contact_card',
        ],
        'field_lower_content' => [
          'calculator',
          'unit_accessibility_information',
          'unit_contact_card',
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
      ],
    ],
    'paragraphs_library_item' => [
      'paragraphs_library_item' => [
        'paragraphs' => [
          'unit_accessibility_information',
          'unit_contact_card',
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_sote_preprocess_block(&$variables) {
  if ($variables['plugin_id'] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero') ||
    !(bool) $entity->get('field_has_hero')->value ||
    $entity->get('field_content')->isEmpty()
  ) {
    return;
  }
  $paragraph = $entity->get('field_content')->first()->get('entity')->getValue();

  if (
    empty($paragraph) ||
    !in_array($entity->bundle(), ['landing_page', 'page']) ||
    !$paragraph instanceof ParagraphInterface
  ) {
    return;
  }
  $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

  // Check if the content field first paragraph is unit search clone
  // and add classes accordingly.
  $paragraph_types = [
    'health_station_search',
    'maternity_and_child_health_clini',
  ];

  if (in_array($paragraph->getType(), $paragraph_types)) {
    $first_paragraph_gray = 'has-first-gray-bg-block';

    // If lead_in field has value, unset 1st gray paragraph class.
    if (
      $entity->hasField('field_lead_in') &&
      // @phpstan-ignore-next-line
      !$entity->field_lead_in->isEmpty()
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // If table of contents is enabled, unset 1st gray paragraph class.
    if (
      $entity->hasField('toc_enabled') &&
      // @phpstan-ignore-next-line
      $entity->toc_enabled->value == TRUE
    ) {
      $first_paragraph_gray = '';
      return;
    }

    // Special cases if the node type is page.
    if ($entity->bundle() === 'page') {
      // Load menu links for the current page entity.
      $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
      $menu_links = $menu_link_manager->loadLinksByRoute(
        "entity.{$entity->getEntityTypeId()}.canonical",
        [$entity->getEntityTypeId() => $entity->id()]
      );

      // If the page is in navigation set a different value for 1st gray
      // paragraph class.
      if (!empty($menu_links) && is_array($menu_links)) {
        $menu_Link = reset($menu_links);

        if ($menu_Link->isEnabled()) {
          $first_paragraph_gray = 'has-first-gray-bg-block--desktop';
        }
      }
    }
  }
}
